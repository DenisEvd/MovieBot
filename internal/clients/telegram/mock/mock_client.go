// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/telegram/types.go

// Package mock_telegram is a generated GoMock package.
package mock_telegram

import (
	telegram "MovieBot/internal/clients/telegram"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTgClient is a mock of TgClient interface.
type MockTgClient struct {
	ctrl     *gomock.Controller
	recorder *MockTgClientMockRecorder
}

// MockTgClientMockRecorder is the mock recorder for MockTgClient.
type MockTgClientMockRecorder struct {
	mock *MockTgClient
}

// NewMockTgClient creates a new mock instance.
func NewMockTgClient(ctrl *gomock.Controller) *MockTgClient {
	mock := &MockTgClient{ctrl: ctrl}
	mock.recorder = &MockTgClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgClient) EXPECT() *MockTgClientMockRecorder {
	return m.recorder
}

// AnswerCallbackQuery mocks base method.
func (m *MockTgClient) AnswerCallbackQuery(queryID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerCallbackQuery", queryID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnswerCallbackQuery indicates an expected call of AnswerCallbackQuery.
func (mr *MockTgClientMockRecorder) AnswerCallbackQuery(queryID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerCallbackQuery", reflect.TypeOf((*MockTgClient)(nil).AnswerCallbackQuery), queryID, text)
}

// DeleteMessage mocks base method.
func (m *MockTgClient) DeleteMessage(chatID, messageID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", chatID, messageID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockTgClientMockRecorder) DeleteMessage(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockTgClient)(nil).DeleteMessage), chatID, messageID)
}

// EditMessageReplyMarkup mocks base method.
func (m *MockTgClient) EditMessageReplyMarkup(chatID, messageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageReplyMarkup", chatID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditMessageReplyMarkup indicates an expected call of EditMessageReplyMarkup.
func (mr *MockTgClientMockRecorder) EditMessageReplyMarkup(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageReplyMarkup", reflect.TypeOf((*MockTgClient)(nil).EditMessageReplyMarkup), chatID, messageID)
}

// SendMessage mocks base method.
func (m *MockTgClient) SendMessage(chatID int, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", chatID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTgClientMockRecorder) SendMessage(chatID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTgClient)(nil).SendMessage), chatID, text)
}

// SendMessageWithInlineKeyboard mocks base method.
func (m *MockTgClient) SendMessageWithInlineKeyboard(chatID int, text string, buttons []telegram.InlineKeyboardButton) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageWithInlineKeyboard", chatID, text, buttons)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageWithInlineKeyboard indicates an expected call of SendMessageWithInlineKeyboard.
func (mr *MockTgClientMockRecorder) SendMessageWithInlineKeyboard(chatID, text, buttons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithInlineKeyboard", reflect.TypeOf((*MockTgClient)(nil).SendMessageWithInlineKeyboard), chatID, text, buttons)
}

// SendPhotoWithInlineKeyboard mocks base method.
func (m *MockTgClient) SendPhotoWithInlineKeyboard(chatID int, text, photoURL string, buttons []telegram.InlineKeyboardButton) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhotoWithInlineKeyboard", chatID, text, photoURL, buttons)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPhotoWithInlineKeyboard indicates an expected call of SendPhotoWithInlineKeyboard.
func (mr *MockTgClientMockRecorder) SendPhotoWithInlineKeyboard(chatID, text, photoURL, buttons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhotoWithInlineKeyboard", reflect.TypeOf((*MockTgClient)(nil).SendPhotoWithInlineKeyboard), chatID, text, photoURL, buttons)
}

// Updates mocks base method.
func (m *MockTgClient) Updates(offset, limit int) ([]telegram.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", offset, limit)
	ret0, _ := ret[0].([]telegram.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockTgClientMockRecorder) Updates(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockTgClient)(nil).Updates), offset, limit)
}
